# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

strategy:
  matrix:
    linux:
      imageName: 'ubuntu-latest'
    mac:
      imageName: 'macos-10.14'
    windows:
      imageName: 'windows-2019'

pool:
  vmImage: $(imageName)

steps:
# Linux
#- bash: |
#    wget -q https://packages.microsoft.com/config/ubuntu/16.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
#    sudo dpkg -i packages-microsoft-prod.deb
#    sudo apt-get install apt-transport-https
#    sudo apt-get update
#    sudo apt-get install dotnet-sdk-2.2
#  condition: eq( variables['Agent.OS'], 'Linux' )
#  displayName: Install dotnet sdk Linux

#- pwsh: |
#    Install-Module Pester -Force -SkipPublisherCheck
#    Install-Module Psake -Force -SkipPublisherCheck
#  condition: eq( variables['Agent.OS'], 'Linux')
#  displayName: Install PS modules Linux

# macOS
#- bash: |
#    brew cask install dotnet-sdk
#  condition: eq( variables['Agent.OS'], 'Darwin' )
#  displayName: Install dotnet sdk MacOS

#- pwsh: |
#    Install-Module Pester -Force -SkipPublisherCheck
#    Install-Module Psake -Force -SkipPublisherCheck
#  condition: eq( variables['Agent.OS'], 'Darwin')
#  displayName: Install PS modules MacOS

# Windows
#- pwsh: |
#    Install-Module Pester -Force -SkipPublisherCheck
#    Install-Module Psake -Force -SkipPublisherCheck
#  condition: eq( variables['Agent.OS'], 'Windows_NT' )
#  displayName: Install PS modules Windows

- pwsh: |
    Install-Module Psake -Force -SkipPublisherCheck
    Invoke-Psake -Buildfile psake.ps1 -Tasklist BuildTools, Compile, Test
  displayName: Psake build
